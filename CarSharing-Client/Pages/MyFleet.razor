@page "/view-vehicles"
@using CarSharing_Client.Models
@using CarSharing_Client.Data
@using CarSharing_Client.Authentication
@using Microsoft.Extensions.Caching.Memory

@inject IVehicleService _vehicleService;
@inject IListingService _listingService
@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _authenticationStateProvider
@inject IMemoryCache _memoryCache

@if (_customer != null)
{
    <h3>@_customer.FirstName @_customer.LastName's fleet</h3>
}


<button class="btn btn-dark" @onclick="@( () => _navigationManager.NavigateTo($"/vehicle-register") )">Register new vehicle</button>

<hr/>
<div class="row p-1">
    @if (_vehicles != null)
    {
        foreach (var vehicle in _vehicles)
        {
            <div class="col-lg-4 col-md-6 col-sm-12 mb-3 " style="opacity: @(vehicle.IsApproved ? 1 : 0.5)">
                <div class="card text-center">
                    <div class="member-card">
                        <div class="card-header p-3">
                            <span class="iconify " data-icon="fluent:vehicle-car-profile-ltr-16-filled" data-width="30" data-height="30"></span>
                            <h4>@vehicle.Brand @vehicle.Model </h4>
                            <p>
                                <strong>Licence number: @vehicle.LicenseNo</strong>
                            </p>

                        </div>

                        @if (vehicle.IsApproved)
                        {
                            <div class="card-body">

                                @if (_listings.ContainsKey(vehicle.LicenseNo))
                                {
                                    Listing listing = _listings[vehicle.LicenseNo];

                                    <h4><span class="oi oi-circle-check" data-width="30" data-height="30"></span> Vehicle is listed</h4>
                                    <p class="card-text">
                                        <span class="font-weight-light">From</span> @listing.DateFrom.ToString(DateTimeFormat)
                                    </p>

                                    <p class="card-text">
                                        <span class="font-weight-light">To:</span>
                                        @if (listing.DateTo != null)
                                        {
                                            @listing.DateTo.Value.ToString(DateTimeFormat)
                                        }
                                    </p>

                                    <p class="card-text">
                                        <span class="font-weight-light">Daily price:</span> @listing.Price
                                    </p>

                                    <p class="card-text">
                                        <span class="font-weight-light">Location: </span> @listing.Location
                                    </p>

                                    <p class="card-text">
                                        <span class="font-weight-light">Vehicle was listed at: </span> @listing.ListedDate.ToString(DateTimeFormat)
                                    </p>
                                }
                                else
                                {
                                    <h4><span class="oi oi-circle-x" data-width="30" data-height="30"></span> Vehicle is not listed</h4>
                                }
                            </div>
                            
                            <div class="card-footer">
                                <p class="card-text">
                                    <Button @onclick="@(() => _navigationManager.NavigateTo($"/listing-register/{vehicle.LicenseNo}"))" class="btn btn-dark">Lease vehicle</Button>

                                </p>

                                <p class="card-text">
                                    <Button @onclick="@(async () => await RemoveVehicle(vehicle))" class="btn btn-dark">Delete vehicle</Button>
                                </p>

                                <p class="card-text">
                                    <Button @onclick="@(() => _navigationManager.NavigateTo($"/vehicle-edit/{vehicle.LicenseNo}"))" class="btn btn-dark">Open vehicle</Button>
                                </p>

                                @if (_listings.ContainsKey(vehicle.LicenseNo))
                                {
                                    Listing listing = _listings[vehicle.LicenseNo];

                                    <p class="card-text">
                                        <Button @onclick="@(() => { _navigationManager.NavigateTo($"/view-leases/listing/{listing.Id}"); })" class="btn btn-dark">View leases</Button>
                                    </p>

                                    <p class="card-text">
                                        <Button @onclick="@(() => _navigationManager.NavigateTo($"/listing-edit/{listing.Id}"))" class="btn btn-dark">Open listing</Button>
                                    </p>

                                    <p class="card-text">
                                        <Button @onclick="@(async () => { await RemoveListing(listing); })" class="btn btn-dark">Delete listing</Button>
                                    </p>
                                }

                            </div>
                        }
                        else
                        {
                            <div class="card-body">
                                <div class="card-text">
                                    <strong> Waiting for approval... </strong>
                                </div>
                            </div>
                            <div class="card-footer">

                                <p class="card-text">
                                    <Button @onclick="@(async () => await RemoveVehicle(vehicle))" class="btn btn-dark">Delete vehicle</Button>
                                </p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    }
</div>

@code
{
        private const string DateTimeFormat = "dd/MM/yyyy HH':'mm";

    private IList<Vehicle> _vehicles = new List<Vehicle>();
    private readonly Dictionary<string, Listing> _listings = new();
    private Customer _customer;

    protected override async Task OnInitializedAsync()
    {
        _customer = ((CustomAuthenticationStateProvider) _authenticationStateProvider).CachedCustomer;
        string cacheKey = "vehicles/" + _customer.Cpr;

        if (!_memoryCache.TryGetValue(cacheKey, out IList<Vehicle> cacheVehicles))
        {
            Console.WriteLine("Updating fleet cache...");
            cacheVehicles = await _vehicleService.GetVehiclesByOwnerCprAsync(_customer.Cpr);

            var cacheEntryOptions = new MemoryCacheEntryOptions()
            //todo change to 10 min
                .SetAbsoluteExpiration(TimeSpan.FromSeconds(60 * 1));

            _memoryCache.Set(cacheKey, cacheVehicles, cacheEntryOptions);
        }

        _vehicles = cacheVehicles;
        await InitializeListingDict();
    }

    private async Task InitializeListingDict()
    {
        List<Task<Listing>> listOfTasks = _vehicles.Select(vehicle => _listingService.GetListingsByVehicleAsync(vehicle.LicenseNo)).ToList();
        var result = await Task.WhenAll(listOfTasks);
        foreach (var listing in result)
        {
            if (listing != null)
            {
                _listings.Add(listing.Vehicle.LicenseNo, listing);
            }
        }
    }

    private async Task RemoveVehicle(Vehicle vehicle)
    {
        await _vehicleService.RemoveVehicleAsync(vehicle.LicenseNo);
        _vehicles.Remove(vehicle);
    }

    private async Task RemoveListing(Listing listing)
    {
        await _listingService.RemoveListingAsync(listing.Id);
        _listings.Remove(listing.Vehicle.LicenseNo);
    }
}