@page "/create-lease/"
@using Microsoft.AspNetCore.WebUtilities
@using CarSharing_Client.Models
@using CarSharing_Client.Data
@using CarSharing_Client.Authentication
@inject NavigationManager _navMgr
@inject IListingService _listingService
@inject ILeaseService _leaseService
@inject AuthenticationStateProvider _authenticationStateProvider
@inject IMobilePayWebService _mobilePayWebService


<div class="row p-1">
    @if (_listing != null)
    {
        <div class="col-lg-5 col-md-6 col-sm-12 mb-3 ">
            <div class="card text-center">
                <div class="member-card">
                    <div class="card-header p-3">
                        <h4>Your lease:</h4>
                        <p> @DateFrom -> @DateTo </p>

                    </div>
                    <div class="card-body">


                        <p class="card-text">
                            <span class="font-weight-light">Daily Price</span> @_listing.Price
                        </p>

                        <p class="card-text">
                            <span class="font-weight-light">
                                Price for the whole trip: =
                                <strong> @_lease.TotalPrice dkk </strong>
                            </span>

                        </p>


                        <div class="card-footer">

                        </div>


                    </div>
                </div>
            </div>
        </div>
    }


    @if (_listing?.Vehicle.Owner != null)
    {
        <div class="col-lg-3 col-md-6 col-sm-12 mb-3 ">
            <div class="card text-center">
                <div class="member-card">
                    <div class="card-header p-3">
                        <h5>Vehicle owner is </h5>
                        <div class="d-flex justify-content-around mt-2">
                            <span class="iconify" data-icon="iconoir:profile-circled" data-width="60" data-height="60"></span>
                            <div class="d-flex flex-column">
                                <h4>@_listing.Vehicle.Owner.FirstName @_listing.Vehicle.Owner.LastName </h4>

                            </div>
                        </div>


                    </div>
                    <div class="card-body">

                        <p class="card-text">
                            <span class="font-weight-light">Phone number:</span> @_listing.Vehicle.Owner.PhoneNo
                        </p>


                        <div class="card-footer">

                        </div>


                    </div>
                </div>
            </div>
        </div>
    }


    @if (_listing?.Vehicle != null)
    {
        <div class="col-lg-3 col-md-6 col-sm-12 mb-3 ">
            <div class="card text-center">
                <div class="member-card">
                    <div class="card-header p-3">
                        <h4>@_listing.Vehicle.Brand @_listing.Vehicle.Model </h4>
                    </div>
                    <div class="card-body">

                        <p class="card-text">
                            <span class="font-weight-light">Licence no:</span> @_listing.Vehicle.LicenseNo
                        </p>

                        <p class="card-text">
                            <span class="font-weight-light">Transmition</span> @_listing.Vehicle.Transmission
                        </p>
                        <p class="card-text">
                            <span class="font-weight-light">Seats:</span> @_listing.Vehicle.Seats
                        </p>
                        <p class="card-text">
                            <span class="font-weight-light">Fuel:</span> @_listing.Vehicle.FuelType
                        </p>
                        <p class="card-text">
                            <span class="font-weight-light">Vehicle type:</span> @_listing.Vehicle.Type
                        </p>
                        <p class="card-text">
                            <span class="font-weight-light">Manufacture year:</span> @_listing.Vehicle.ManufactureYear
                        </p>

                        <div class="card-footer">

                        </div>


                    </div>
                </div>
            </div>
        </div>
    }

</div>


<div class="row mb-0">
    <div class="col-2">
        <label> Input discount code</label>
    </div>

</div>

<div class="row mt-0">
    <div class="col-2 ml-2 mt-1">
        <input @bind="_couponCode" type="text" class="form-control ">
    </div>

    <div class="col-2  mt-1 mb-0">
        <button @onclick="ApplyDiscountCode" class="btn btn-dark">Apply discount code</button>
    </div>
    <div class="col-1"></div>

    @if (!string.IsNullOrEmpty(_qrcodeSource))
    {
        <img 
            style="opacity: @(_displayQr? 1 : 0); -webkit-user-select:none; display:block;"
            src="@("data:image/png;base64," + _qrcodeSource)"
            alt="MobilePay QR Code">
    }

</div>


<div class="row">
    <div class="col-5"></div>
    <div class="col-3 ml-2 mt-0">
        <p class="actions">
            <button @onclick="AddLease" disabled="@(_displayQr)" class="btn btn-outline-dark ">@_addButtonText</button>
            <button  style="opacity: @(_displayQr? 0 : 1);" @onclick="@(() => _navMgr.NavigateTo("/search/"))" class="btn btn-danger">Cancel</button>
        </p>
    </div>
</div>


@if (_errorMessage != "")
{
    <div class="alert alert-danger" role="alert">
        @_errorMessage
    </div>
}




@code {

    [Parameter]
    public int ListingId { get; set; }

    [Parameter]
    public DateTime DateFrom { get; set; }

    [Parameter]
    public DateTime DateTo { get; set; }

    private Listing _listing;
    private string _couponCode;
    private Customer _customer;
    private Lease _lease;

    private string _errorMessage;
    private Uri _uri;

    private string _paymentId = "";
    private string _qrcodeSource = "";
    private bool _displayQr;
    
    private string _addButtonText;


    protected override async Task OnInitializedAsync()
    {
        _errorMessage = "";
        _displayQr = false;
        _addButtonText = "Rent vehicle";
        GetDataFromUrl();

        _listing = await _listingService.GetListingById(ListingId);
        _customer = ((CustomAuthenticationStateProvider) _authenticationStateProvider).CachedCustomer;

        _lease = new Lease
        {
            LeasedFrom = DateFrom,
            LeasedTo = DateTo,
            Customer = _customer,
            Listing = _listing
        };

        _couponCode = string.Empty;
        try
        {
            _lease = await _leaseService.ValidateLeaseAsync(_lease, _couponCode);
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
        }
        
        _paymentId = await _mobilePayWebService.CreateNewPayment(_lease.TotalPrice);
        await GenerateQrCode(200, _paymentId);
    }

    private void GetDataFromUrl()
    {
        _uri = _navMgr.ToAbsoluteUri(_navMgr.Uri);

        if (QueryHelpers.ParseQuery(_uri.Query).TryGetValue("listingId", out var lId))
        {
            ListingId = int.Parse(lId);
        }

        if (QueryHelpers.ParseQuery(_uri.Query).TryGetValue("DateFrom", out var dFrom))
        {
            DateFrom = DateTime.Parse(dFrom);
        }

        if (QueryHelpers.ParseQuery(_uri.Query).TryGetValue("DateTo", out var dTo))
        {
            DateTo = DateTime.Parse(dTo);
        }
    }

    private async Task AddLease()
    {
        try
        {
            _displayQr = true;
            
            _addButtonText = "Verifying payment";
            if (await _mobilePayWebService.ValidatePayment(_paymentId))
            {
                _addButtonText = "Payment verified";
            
                await _leaseService.AddLeaseAsync(_lease);
                _navMgr.NavigateTo("/view-rentals/");
            
                return;
            }
            
            _addButtonText = "Rent vehicle";
            _errorMessage = "Payment failed";
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
        }
    }

    private async Task ApplyDiscountCode()
    {
        try
        {
            _lease = await _leaseService.ValidateLeaseAsync(_lease, _couponCode);
            _errorMessage = "";
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
        }
    }

    private async Task GenerateQrCode(int qrCodeWidth, string text)
    {
        try
        {
            _qrcodeSource = await _mobilePayWebService.GenerateQrCode(qrCodeWidth, text);
        }
        catch (Exception)
        {
            _errorMessage = "Can not generate the QRCode";
        }
    }


}