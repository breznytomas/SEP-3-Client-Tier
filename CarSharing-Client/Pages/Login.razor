@page "/login"
@using CarSharing_Client.Authentication
@namespace CarSharing_Client.Pages
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager _navigationManager


<AuthorizeView>
    <NotAuthorized>
        <div class="container">
            <div class="row justify-content-center align-items-center" style="height:50vh">
                <div class="col-4">
                    <div class="card">
                        <div class="card-body">
                            <div class="form-group">
                                <input type="text" class="form-control" name="username" placeholder="username" @bind-value="_username">
                            </div>
                            <div class="form-group">
                                <input type="password" class="form-control" name="password" placeholder="password" @bind-value="_password">
                            </div>
                            <button  class="btn btn-primary" @onclick="PerformLogin">Login</button>
                            <div style="color:red">@_errorMessage</div>
                        </div>
                    </div>
                </div>
            </div>
             <p><em> <a href="/registration">Don't have an account?</a></em></p>
        </div>
    </NotAuthorized>
    <Authorized>
        <h3>Loged in as @context.User.Identity?.Name</h3>
       

        <button class="btn btn-outline-dark" @onclick="PerformLogout">Log out</button>
    </Authorized>
</AuthorizeView>


@code {
    private string _username;
    private string _password;
    private string _errorMessage;

    private async Task PerformLogin()
    {
        _errorMessage = "";
        try
        {
            await ((CustomAuthenticationStateProvider) _authenticationStateProvider).ValidateLogin(_username, _password);
            _username = "";
            _password = "";
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
        }
    }


    private async Task PerformLogout()
    {
        _errorMessage = "";
        _username = "";
        _password = "";

        try
        {
            await ((CustomAuthenticationStateProvider) _authenticationStateProvider).Logout();
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
        }
    }

}